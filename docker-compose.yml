services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    ports:
      - "19092:19092"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "9081:8081"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    ports:
      - "8085:8080"

  postgres:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_USER: weather
      POSTGRES_PASSWORD: weather
      POSTGRES_DB: weather
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  alerts-normalizer-svc:
    build: ./services/alerts-normalizer-svc
    depends_on:
      - kafka
      - schema-registry
    environment:
      KAFKA_BROKER: kafka://kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      NOAA_USER_AGENT: WeatherAlertsEnterprise/0.1 (dev@example.com)
    ports:
      - "8006:8006"

  alerts-matcher-svc:
    build: ./services/alerts-matcher-svc
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_BROKER: kafka://kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      DATABASE_URI: postgresql+psycopg2://weather:weather@postgres:5432/weather
    ports:
      - "8007:8007"

  map-service:
    build: ./services/map-service
    depends_on:
      - postgres
    environment:
      MAP_SERVICE_DATABASE_URI: postgresql+psycopg2://weather:weather@postgres:5432/weather
    ports:
      - "8003:8003"

  notification-router-service:
    build: ./services/java/notification-router-service
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8100:8080"

  sms-worker-service:
    build: ./services/java/sms-worker-service
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_BROKER: kafka:9092
      DATABASE_URI: jdbc:postgresql://postgres:5432/weather
      DATABASE_USER: weather
      DATABASE_PASSWORD: weather
    ports:
      - "8101:8080"

  frontend:
    build:
      context: ./frontend
      args:
        VITE_API_BASE_URL: http://localhost:8088
    depends_on:
      - notification-router-service
    ports:
      - "3000:80"

  email-worker:
    build: ./services/workers/email-worker
    depends_on:
      - kafka

  push-worker:
    build: ./services/workers/push-worker
    depends_on:
      - kafka

  user-service:
    build: ./services/java/user-service
    depends_on:
      - postgres
      - kafka
    environment:
      DATABASE_URI: jdbc:postgresql://postgres:5432/weather
      DATABASE_USER: weather
      DATABASE_PASSWORD: weather
      KAFKA_BROKER: kafka:9092
    ports:
      - "8001:8080"

  admin-service:
    build: ./services/java/admin-service
    depends_on:
      - postgres
    environment:
      DATABASE_URI: jdbc:postgresql://postgres:5432/weather
      DATABASE_USER: weather
      DATABASE_PASSWORD: weather
    ports:
      - "8005:8080"

volumes:
  postgres-data:
